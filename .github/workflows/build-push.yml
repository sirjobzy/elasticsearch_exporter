name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-west-1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23" # Specify your required Go version

      - name: Build Go Artifact
        run: |
          export GOOS=linux
          export GOARCH=amd64
          make common-build PREFIX=.build/linux-amd64

      # Step 2: Set up Docker Buildx (optional but recommended for advanced build features)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Amazon ECR using AWS credentials stored as GitHub secrets
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
          registry-type: public
        # env:
        #   AWS_REGION: us-east-1
        #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # Step 4: Build, tag, and push the Docker image to ECR
      - name: Build, tag, and push image to ECR
        env:
          # These environment variables can be defined in your repoâ€™s secrets or directly in the workflow
          ECR_REGISTRY: public.ecr.aws/e4y1l3l8
          ECR_REPOSITORY: elasticsearch_exporter
          IMAGE_TAG: latest # or use ${{ github.sha }} for unique tags per commit
        run: |
          # Build the Docker image using the Dockerfile in the root of your repo
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

          # Tag the image with the full ECR registry path
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Push the image to your ECR repository
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
